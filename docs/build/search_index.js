var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation page for \"MDE for Multiscale\"!","category":"page"},{"location":"","page":"Home","title":"Home","text":"MDE_project.Fast_OU_ϵ","category":"page"},{"location":"#MDE_project.Fast_OU_ϵ","page":"Home","title":"MDE_project.Fast_OU_ϵ","text":"Fast_OU_ϵ(x0, y0; <keyword arguments>)\n\nReturn a two-dimensional fast-slow Ornstein-Uhlenbeck process starting at (x0, y0) as a discretized time series.\n\nThe corresponding stochastic differential equation is\n\nbeginaligned\n  dX_ϵ(t) = left( frac1ϵ σ(X_ϵ(t)) Y_ϵ(t) + h(X_ϵ(t) Y_ϵ(t)) - σ(X_ϵ(t))σ(X_ϵ(t)) right) dt quad X_ϵ(0) = x_0 \n  dY_ϵ(t) = -frac1ϵ^2 Y_ϵ(t) + fracsqrt2ϵ dV_t quad Y_ϵ(0) = y_0\nendaligned\n\nHere is σ the first derivative of σ. A simple Euler-Maruyama discretization is implemented for the generation of the time series.\n\n\n\nArguments\n\nx0::Real:         initial point x_0 of slow process X_ϵ.\ny0::Real:         initial point y_0 of fast process Y_ϵ.\nfunc_config:      collection of the functions h σ and σ as a tuple.\nϵ::Real=0.1:      small scale parameter ϵ.\nT::Real=100:      time horizon of time series.\ndt:Real=1e-3:     time discretization step used in the Euler-Maruyma scheme.\n\n\n\nExamples\n\njulia> h = x -> -x\njulia> σ = x -> sqrt(2)\njulia> σ_prime = x -> 0\njulia> Fast_OU_ϵ(1.0, 1.0, func_config=(h, σ, σ_prime))\n\n\n\n\n\n","category":"function"}]
}
