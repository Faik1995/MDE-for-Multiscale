var documenterSearchIndex = {"docs":
[{"location":"","page":"Welcome","title":"Welcome","text":"Welcome to the documentation page for \"MDE for Multiscale\"!","category":"page"},{"location":"invariant_densities/","page":"Invariant Densities","title":"Invariant Densities","text":"μ\n∂ϑ_μ\n∂Σ_μ","category":"page"},{"location":"invariant_densities/#MDE_project.μ","page":"Invariant Densities","title":"MDE_project.μ","text":"μ(x, ϑ, Σ, V)\n\nReturn function value of invariant density at x defined through a potential V and given parameter values ϑ and Σ.\n\nThe invariant density is given by the formula\n\nbeginaligned\n    mu(x vartheta Sigma V) = frac1Z(ϑ Σ) expleft( -fracvarthetaSigma V(x) right) quad x in R\nendaligned\n\nwhere V is potential on R, e.g. V(x) = x^44 - x^22, and Z(ϑ Σ)0 is a normalization constant.\n\n\n\nArguments\n\nx::Real:            argument x at which to evaluate the function.\nϑ::Real:            positive drift coefficient vartheta.\nΣ::Real:            positive diffusion coefficient Sigma.\nV:                  defining potential function V.\n\n\n\nExamples\n\njulia> lines(range(-5, 5, 1000), map(y -> μ(y, 1, 1, x -> x^2/2), range(-5, 5, 1000)))\n\n\n\n\n\n","category":"function"},{"location":"invariant_densities/#MDE_project.∂ϑ_μ","page":"Invariant Densities","title":"MDE_project.∂ϑ_μ","text":"∂ϑ_μ(x, ϑ, Σ, V)\n\nReturn function value of derivative of invariant density with respect to drift parameter ϑ at x for given parameter values ϑ and Σ and potential V.\n\nThe derivative of the invariant density with respect to the drift parameter is given by the formula\n\nbeginaligned\n    partial_ϑ   mu(x vartheta Sigma V) = -mu(x vartheta Sigma V) left( fracV(x)Sigma + fracpartial_vartheta Z(ϑ Σ)Z(ϑ Σ) right) quad x in R 05cm\n    partial_vartheta Z(ϑ Σ) = -frac1Sigma int_R V(y) expleft(-fracvarthetaSigma V(y)right)  dy\nendaligned\n\nwhere V is a potential on R, e.g. V(x) = x^22 - x^44, and Z(ϑ Σ)0 is a normalization constant.\n\n\n\nArguments\n\nx::Real:            argument x at which to evaluate the function.\nϑ::Real:            positive drift coefficient vartheta.\nΣ::Real:            positive diffusion coefficient Sigma.\nV:                  defining potential function V.\n\n\n\nExamples\n\njulia> lines(range(-5, 5, 1000), map(x -> ∂ϑ_μ(x, 1, 1, x -> x^2/2), range(-5, 5, 1000)))\n\n\n\n\n\n","category":"function"},{"location":"invariant_densities/#MDE_project.∂Σ_μ","page":"Invariant Densities","title":"MDE_project.∂Σ_μ","text":"∂Σ_μ(x, ϑ, Σ, V)\n\nReturn function value of derivative of invariant density with respect to diffusion parameter Σ at x for given parameter values ϑ and Σ and potential V.\n\nThe derivative of the invariant density with respect to the diffusion parameter is given by the formula\n\nbeginaligned\n    partial_Sigma   mu(x vartheta Sigma V) = mu(x vartheta Sigma V) left( fracvartheta V(x)Sigma^2 - fracpartial_Sigma Z(ϑ Σ)Z(ϑ Σ) right) quad x in R 05cm\n    partial_Sigma Z(vartheta Sigma) = fracvarthetaSigma^2 int_R V(y) expleft(-fracvarthetaSigma V(y)right)  dy\nendaligned\n\nwhere V is a potential on R, e.g. V(x) = x^22 - x^44, and Z(ϑ Σ)0 is a normalization constant.\n\n\n\nArguments\n\nx::Real:            argument x at which to evaluate the function.\nϑ::Real:            positive drift coefficient vartheta.\nΣ::Real:            positive diffusion coefficient Sigma.\nV:                  defining potential function V.\n\n\n\nExamples\n\njulia> lines(range(-5, 5, 1000), map(x -> ∂Σ_μ(x, 1, 1, x -> x^2/2), range(-5, 5, 1000)))\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/","page":"Multiscale System and Homogenized Limit Pairs","title":"Multiscale System and Homogenized Limit Pairs","text":"Fast_OU_ϵ\nFast_OU_∞\nLDA\nNLDAM\nNSDP\nLangevin_ϵ\nK\nLangevin_∞\nLDO\nNLDO\nLangevin_ϵ_2D\nLangevin_∞_2D\nBurger_ϵ\nBurger_∞\nFast_chaotic_ϵ\nFast_chaotic_∞\nproduce_trajectory_1D\nproduce_trajectory_2D","category":"page"},{"location":"multiscale_limit_pairs/#MDE_project.Fast_OU_ϵ","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.Fast_OU_ϵ","text":"Fast_OU_ϵ(x0, y0; <keyword arguments>)\n\nReturn a 2-dimensional fast-slow Ornstein-Uhlenbeck process starting at (x0, y0) as a discretized time series.\n\nThe corresponding stochastic differential equation is defined for t in 0T as\n\nbeginaligned\n  dX_ϵ(t) = left( frac1ϵ σ(X_ϵ(t)) Y_ϵ(t) + h(X_ϵ(t) Y_ϵ(t)) - σ(X_ϵ(t))σ(X_ϵ(t)) right) dt quad X_ϵ(0) = x_0 \n  dY_ϵ(t) = -frac1ϵ^2 Y_ϵ(t) + fracsqrt2ϵ dV(t) quad Y_ϵ(0) = y_0\nendaligned\n\nHere, σ is the first derivative of σ. A simple Euler-Maruyama discretization is implemented for the generation of the time series.\n\n\n\nArguments\n\nx0::Real:         initial point x_0 of slow process X_ϵ.\ny0::Real:         initial point y_0 of fast process Y_ϵ.\nfunc_config:      collection of the functions h σ and σ as a tuple.\nϵ::Real=0.1:      positive small scale parameter ϵ.\nT::Real=100:      time horizon of time series.\ndt:Real=1e-3:     time discretization step used in the Euler-Maruyama scheme.\n\n\n\nExamples\n\n# linear drift with additive noise\nT = 10.0\ntrajectory = Fast_OU_ϵ(1.0, 1.0, func_config=LDA(), ϵ=0.1, T=T)\nfig = produce_trajectory_1D(trajectory, T)\n#save(\"trajectory_fast_OU_process.pdf\", fig)\n\n# nonlinear drift with additive and multiplicative noise\nT = 10.0\ntrajectory = Fast_OU_ϵ(1.0, 1.0, func_config=NLDAM(), ϵ=0.1, T=T)\nfig = produce_trajectory_1D(trajectory, T)\n\n# nonlinear drift with additive and multiplicative noise, non-symmetric double-well potential\nT = 10.0\ntrajectory = Fast_OU_ϵ(1.0, 1.0, func_config=NSDP(), ϵ=0.1, T=T)\nfig = produce_trajectory_1D(trajectory, T)\n\n\n\nSee also Fast_OU_∞, LDA, NLDAM, NSDP.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.Fast_OU_∞","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.Fast_OU_∞","text":"Fast_OU_∞(X0; <keyword arguments>)\n\nReturn a one-dimensional limit process, homogenized from the fast-slow Ornstein-Uhlenbeck process figuring in Fast_OU_ϵ, starting at X0 as a discretized time series.\n\nThe corresponding stochastic differential equation is defined for t in 0T as\n\nbeginaligned\n  dX(t) = barh(X(t)) dt - sqrt2 σ(X(t))^2 dW(t) quad X(0) = X_0\nendaligned\n\nHere, barh is the average of h with respect to the invariant measure of the fast process Y_ϵ coming from Fast_OU_ϵ.  A simple Euler-Maruyama discretization is implemented for the generation of the time series.\n\n\n\nArguments\n\nX0::Real:         initial point X_0 of limit process X.\nfunc_config:      collection of the functions barh and σ as a tuple.\nT::Real=100:      time horizon of time series.\ndt:Real=1e-3:     time discretization step used in the Euler-Maruyama scheme.\n\n\n\nExamples\n\njulia> h_aver = x -> -x   # corresponds to an ordinary Ornstein-Uhlenbeck process\njulia> σ = x -> sqrt(2)\njulia> Fast_OU_∞(1.0, func_config=(h_aver, σ))\n\n\n\nSee also Fast_OU_ϵ, LDA, NLDAM, NSDP.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.LDA","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.LDA","text":"LDA(A, σ)\n\nReturn a tuple of functions used for the definition of Fast_OU_ϵ.\n\nThe returned functions are\n\nbeginaligned\n  h(x) = -Ax quad A  0 \n  σ(x) = sqrtσquad\n  σ(x) = 0  quad σ0\nendaligned\n\nThey yield a linear drift with additive noise.\n\n\n\nArguments\n\nA::Real=1:        non-negative real number.\nσ::Real=1:        positive real number.\n\n\n\nSee also Fast_OU_ϵ.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.NLDAM","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.NLDAM","text":"NLDAM(A, B, σ_a, σ_b)\n\nReturn a tuple of functions used for the definition of Fast_OU_ϵ.\n\nThe returned functions are\n\nbeginaligned\n  h(x) = Ax - Bx^3 quad A B  0 \n  σ(x) = sqrtσ_a + σ_b x^2 quad\n  σ(x) = fracσ_b xsqrtσ_a + σ_b x^2 quad σ_a σ_b  0\nendaligned\n\nThey yield a nonlinear drift with additive and multiplicative noise.\n\n\n\nArguments\n\nA::Real=2:          non-negative real number.\nB::Real=10:         non-negative real number.\nσ_a::Real=1:        positive real number.\nσ_b::Real=1:        positive real number.\n\n\n\nSee also Fast_OU_ϵ.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.NSDP","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.NSDP","text":"NSDP(A, B, C, σ_a, σ_b)\n\nReturn a tuple of functions used for the definition of Fast_OU_ϵ.\n\nThe returned functions are\n\nbeginaligned\n  h(x) = Ax + Bx^2 - Cx^3 quad A B C  0 \n  σ(x) = sqrtσ_a + σ_b x^2 quad\n  σ(x) = fracσ_b xsqrtσ_a + σ_b x^2 quad σ_a σ_b  0\nendaligned\n\nThey yield a nonlinear, non-symmetric double-well potential drift with additive and multiplicative noise.\n\n\n\nArguments\n\nA::Real=1:          non-negative real number.\nB::Real=2:          non-negative real number.\nC::Real=5:          non-negative real number.\nσ_a::Real=1:        positive real number.\nσ_b::Real=1:        positive real number.\n\n\n\nSee also Fast_OU_ϵ.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.Langevin_ϵ","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.Langevin_ϵ","text":"Langevin_ϵ(x0; <keyword arguments>)\n\nReturn a 2-dimensional overdamped Langevin process with a large-scale potential and a fast oscillating part starting at (x0, y0/ϵ) as a discretized time series.\n\nThe corresponding stochastic differential equation is defined for t in 0T as\n\nbeginaligned\n  dX_ϵ(t) = -α V(X_ϵ(t)) - frac1ϵ pleft( fracX_ϵ(t)ϵ right) dt  + sqrt2 σ dU(t) quad X_ϵ(0) = x_0 \n  dY_ϵ(t) = -fracαϵ V(X_ϵ(t)) - frac1ϵ^2 pleft( Y_ϵ(t) right) dt  + sqrtfrac2 σϵ^2 dU(t) quad Y_ϵ(0) = y_0\nendaligned\n\nHere, V is a large-scale potential and p a 2π-periodic function, see LDO or NLDO. Note that Y_ϵ = X_ϵϵ.  A simple Euler-Maruyama discretization is implemented for the generation of the time series.\n\n\n\nArguments\n\nx0::Real:         initial point x_0 of slow process X_ϵ.\nfunc_config:      collection of the functions V V p and p as a tuple.\nα::Real:          non-negative drift parameter α.\nσ::Real:          positive diffusion parameter σ.\nϵ::Real=0.1:      positive small scale parameter ϵ.\nT::Real=100:      time horizon of time series.\ndt:Real=1e-3:     time discretization step used in the Euler-Maruyama scheme.\n\n\n\nExamples\n\n# quadratic potential V with sine oscillation p\nT = 10.0\ntrajectory = Langevin_ϵ(1.0, func_config=LDO(), α=2.0, σ=1.0, ϵ=0.1, T=T)\nfig = produce_trajectory_1D(trajectory, T)\n#save(\"trajectory_Langevin_process.pdf\", fig)\n\n\n\nSee also Langevin_∞, LDO, NLDO.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.K","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.K","text":"K(p, σ)\n\nReturn corrective constant of the cell problem of the homogenization in the overdamped Langevin case.\n\n\n\nArguments\n\np:                2π-periodic function.\nσ:                positive diffusion parameter of slow process X_ϵ.\n\n\n\nSee also Langevin_∞.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.Langevin_∞","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.Langevin_∞","text":"Langevin_∞(X0; <keyword arguments>)\n\nReturn a one-dimensional overdamped limit Langevin process, homogenized from the multiscale overdamped Langevin process figuring in Langevin_ϵ, starting at X0 as a discretized time series.\n\nThe corresponding stochastic differential equation is defined for t in 0T as\n\nbeginaligned\n  dX(t) = -α K V(X(t)) dt  + sqrt2 σ K dW(t) quad X(0) = X_0\nendaligned\n\nHere, K is a corrective constant that comes from the cell problem of the homogenization, see also K, and is computed inside the function. A simple Euler-Maruyama discretization is implemented for the generation of the time series.\n\n\n\nArguments\n\nX0::Real:         initial point X_0 of limit process X.\nfunc_config:      collection of the functions V V p and p as a tuple.\nα::Real:          non-negative drift parameter α.\nσ::Real:          positive diffusion parameter σ.\nT::Real=100:      time horizon of time series.\ndt:Real=1e-3:     time discretization step used in the Euler-Maruyama scheme.\n\n\n\nSee also Langevin_ϵ, LDO, NLDO.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.LDO","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.LDO","text":"LDO()\n\nReturn a tuple of functions used for the definition of Langevin_ϵ and Langevin_∞.\n\nThe returned functions are\n\nbeginaligned\n  V(x) = frac12 x^2 quad\n  V(x) = x \n  p(x) = sin(x) quad\n  p(x) = cos(x)\nendaligned\n\nThey yield a quadratic potential drift with a sine oscillation.\n\n\n\nSee also Langevin_ϵ, Langevin_∞.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.NLDO","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.NLDO","text":"NLDO()\n\nReturn a tuple of functions used for the definition of Langevin_ϵ and Langevin_∞.\n\nThe returned functions are\n\nbeginaligned\n  V(x) = frac14 x^4 - frac12 x^2 quad\n  V(x) = x^3 - x \n  p(x) = sin(x) quad\n  p(x) = cos(x)\nendaligned\n\nThey yield a bistable potential drift with a sine oscillation.\n\n\n\nExamples\n\n# a slightly different potential (for illustrative reasons)\nϵ = 0.1\nV(x) = -x^2 + x^4/12\np(x) = sin(x/ϵ)\nx_range = range(-4,4,2000)\n\n# create and adjust figure components; using CairoMakie.jl here\ndrift_fig = Figure(size=(3840,2160), fontsize = 50)\ndrift_ax = Axis(drift_fig[1, 1],\n  # x-axis\n  xlabel = L\"x\",\n  xticks = LinearTicks(5),\n  # y-axis\n  yticks = LinearTicks(5),\n)\nMakie.xlims!(drift_ax, x_range[1], x_range[end])\ncolsize!(drift_fig.layout, 1, Aspect(1, 1.8))\n  \n\nV_line = lines!(drift_ax, x_range, map(V, x_range), linewidth = 10.0, color = (:darkgrey, 1.0), linestyle = :dash)\nVp_line = lines!(drift_ax, x_range, map(x->V(x)+p(x), x_range), linewidth = 3.0, color = (:black, 1.0))\n\naxislegend(drift_ax,\n[V_line, Vp_line],\n[L\"$x^4/12-x^2$\", L\"$x^4/12 - x^2 + \\sin(x/%$ϵ)$\"],\nlabelsize = 80\n)\n\ndrift_fig\n\n\n\nSee also Langevin_ϵ, Langevin_∞.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.Langevin_ϵ_2D","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.Langevin_ϵ_2D","text":"Langevin_ϵ_2D(x0; <keyword arguments>)\n\nReturn a 4-dimensional overdamped Langevin process with a quadratic potential and a fast separable oscillating part starting at (x0, y0/ϵ) as a discretized time series.\n\nThe corresponding stochastic differential equation is defined for t in 0T as\n\nbeginaligned\n  dX_ϵ(t) \n  = beginpmatrix\n      dX^(1)_ϵ(t) 01cm\n      dX^(2)_ϵ(t)\n    endpmatrix\n  = - M X_ϵ(t) - frac1ϵ \n    beginpmatrix\n      p_1left(X^(1)_ϵ(t)ϵright) 01cm\n      p_2left(X^(2)_ϵ(t)ϵright)\n    endpmatrix dt  + sqrt2 σ dU(t) quad X_ϵ(0) = x_0 \n  dY_ϵ(t) = fracX_ϵϵ\nendaligned\n\nA simple Euler-Maruyama discretization is implemented for the generation of the time series.\n\n\n\nArguments\n\nx0::Vector{Real}: initial point x_0 in mathbbR^2 of slow process X_ϵ.\nfunc_config:      collection of the 2pi-periodic functions p_1 and p_2 as a tuple.\nM::Array{Real}:   positive definite drift matrix M in mathbbR^2 times 2.\nσ::Real:          positive diffusion parameter σ.\nϵ::Real=0.1:      positive small scale parameter ϵ.\nT::Real=100:      time horizon of time series.\ndt:Real=1e-3:     time discretization step used in the Euler-Maruyama scheme.\n\n\n\nExamples\n\n# quadratic potential V and fast separable oscillating part in 2D\ntrajectory = Langevin_ϵ_2D([-5.0, -5.0], func_config=(x-> cos(x), x -> 1/2*cos(x)), M=[4 2;2 3], σ=5.0, ϵ=0.05, T=10.0)\nfig = produce_trajectory_2D(trajectory)\n#save(\"trajectory_Langevin_process_2D.pdf\", fig)\n\n\n\nSee also Langevin_∞_2D.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.Langevin_∞_2D","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.Langevin_∞_2D","text":"Langevin_∞_2D(X0; <keyword arguments>)\n\nReturn a 2-dimensional overdamped limit Langevin process, homogenized from the multiscale overdamped Langevin process figuring in Langevin_ϵ_2D,  starting at X0 as a discretized time series.\n\nThe corresponding stochastic differential equation is defined for t in 0T as\n\nbeginaligned\n  dX(t) = - K M X(t) dt  + sqrt2 σ K dW(t) quad X(0) = X_0\nendaligned\n\nHere, K in mathbbR^2 times 2 is a corrective constant that comes from the cell problem of the homogenization and is computed inside the function.  A simple Euler-Maruyama discretization is implemented for the generation of the time series.\n\n\n\nArguments\n\nX0::Vector{Real}: initial point X_0 in mathbbR^2 of limit process X.\nfunc_config:      collection of the 2pi-periodic functions p_1 and p_2 as a tuple.\nM::Array{Real}:   positive definite drift matrix M in mathbbR^2 times 2.\nσ::Real:          positive diffusion parameter σ.\nT::Real=100:      time horizon of time series.\ndt:Real=1e-3:     time discretization step used in the Euler-Maruyama scheme.\n\n\n\nSee also Langevin_ϵ_2D.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.Burger_ϵ","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.Burger_ϵ","text":"Burger_ϵ(x0, y0, z0; <keyword arguments>)\n\nReturn a three-dimensional process described through a truncated Burger's equation starting at (x0, y0, z0) as a discretized time series.\n\nThe corresponding stochastic differential equation is defined for t in 0T as\n\nbeginaligned\n  dX_ϵ(t) = left( ν X_ϵ(t) - frac12ϵ (X_ϵ(t)Y_ϵ(t) + Y_ϵ(t)Z_ϵ(t)) right) dt                                                 quad X_ϵ(0) = x_0  \n  dY_ϵ(t) = left( ν Y_ϵ(t) - frac3ϵ^2 Y_ϵ(t) - frac12ϵ (2 X_ϵ(t)Z_ϵ(t) - X_ϵ(t)^2) right) dt + fracq_1ϵ dV_1(t)    quad Y_ϵ(0) = y_0  \n  dZ_ϵ(t) = left( ν Z_ϵ(t) - frac8ϵ^2 Y_ϵ(t) - frac32ϵ X_ϵ(t)Y_ϵ(t) right) dt + fracq_2ϵ dV_2(t)                   quad Z_ϵ(0) = z_0\nendaligned\n\nA simple Euler-Maruyama discretization is implemented for the generation of the time series.\n\n\n\nArguments\n\nx0::Real:         initial point x_0 of slow process X_ϵ.\ny0::Real:         initial point y_0 of fast process Y_ϵ.\nz0::Real:         initial point z_0 of fast process Z_ϵ.\nν::Real:          positive parameter ν.\nq1::Real:         positive parameter q_1.\nq2::Real:         positive parameter q_2.\nϵ::Real=0.1:      positive small scale parameter ϵ.\nT::Real=100:      time horizon of time series.\ndt:Real=1e-3:     time discretization step used in the Euler-Maruyama scheme.\n\n\n\nSee also Burger_∞.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.Burger_∞","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.Burger_∞","text":"Burger_∞(X0; <keyword arguments>)\n\nReturn a one-dimensional process described through a limit truncated Burger's equation, homogenized from the multiscale truncated Burger's equation figuring in Burger_ϵ, starting at X0 as a discretized time series.\n\nThe corresponding stochastic differential equation is defined for t in 0T as\n\nbeginaligned\n  dX(t) = left(AX(t) - BX(t)^3right) dt  + sqrtσ_a + σ_bX(t)^2 dW(t) quad X(0) = X_0\nendaligned\n\nwith the paraters\n\nbeginaligned\n  A = ν + fracq_1^2396 + fracq_2^2352 quad B = frac112 quad σ_a = fracq_1^2 q_2^22112 quad σ_b = fracq_1^236\nendaligned\n\nA simple Euler-Maruyama discretization is implemented for the generation of the time series.\n\n\n\nArguments\n\nX0::Real:         initial point X_0 of limit process X.\nν::Real:          positive parameter ν.\nq1::Real:         positive parameter q_1.\nq2::Real:         positive parameter q_2.\nT::Real=100:      time horizon of time series.\ndt:Real=1e-3:     time discretization step used in the Euler-Maruyama scheme.\n\n\n\nSee also Burger_ϵ.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.Fast_chaotic_ϵ","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.Fast_chaotic_ϵ","text":"Fast_chaotic_ϵ(xy0; <keyword arguments>)\n\nReturn the 4-dimensional solution path of a fast chaotic noise system starting at xy0 as a discretized time series.\n\nThe corresponding ordinary differential equation is defined for t in 0T as\n\nbeginaligned\n  fracdX_epsilondt = AX - BX^3 + fraclambdaepsilon Y_epsilon^(2) quad X_ϵ(0) = x_0 \n  fracdY_epsilon^(1)dt = frac10epsilon^2 left( Y_epsilon^(2) - Y_epsilon^(1) right) quad Y_epsilon^(1)(0) = y_0^(1) \n  fracdY_epsilon^(2)dt = frac1epsilon^2 left( 28 Y_epsilon^(1) - Y_epsilon^(2) - Y_epsilon^(1)Y_epsilon^(3) right) quad Y_epsilon^(2)(0) = y_0^(2) \n  fracdY_epsilon^(3)dt = frac1epsilon^2 left( Y_epsilon^(1)Y_epsilon^(2) - frac83 Y_epsilon^(3) right) quad Y_epsilon^(3)(0) = y_0^(3)\nendaligned\n\nThe ODE is solved with a fourth order Runge-Kutta scheme of the DifferentialEquations.jl  package.\n\n\n\nArguments\n\nxy0::Vector{Real}:  initial point (x_0 y_0^(1) y_0^(2) y_0^(3)) in mathbbR^4.\nA::Real:            positive parameter A.\nB::Real:            positive parameter B.\nλ::Real:            positive parameter λ.\nT::Real=100:        time horizon of time series.\ndt:Real=1e-3:       time discretization step used in the ODE solver.\n\n\n\nSee also Fast_chaotic_∞.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.Fast_chaotic_∞","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.Fast_chaotic_∞","text":"Fast_chaotic_∞(X0; <keyword arguments>)\n\nReturn a one-dimensional process described through a limit fast chaotic noise, homogenized from the multiscale fast chaotic noise system figuring in Fast_chaotic_ϵ, starting at X0 as a discretized time series.\n\nThe corresponding stochastic differential equation is defined for t in 0T as\n\nbeginaligned\n  dX(t) = left(AX(t) - BX(t)^3right) dt  + sqrtσ dW(t) quad X(0) = X_0\nendaligned\n\nThe diffusion parameter σ is given by the Green-Kubo formula \n\nbeginaligned\n  sigma = fraclambda^22 int_0^infty lim_T rightarrow infty frac1T int_0^T Y_ϵ=1^(2)(s) Y_ϵ=1^(2)(s+t)  ds  dt\nendaligned\n\nwhich requires to be numerically computed or estimated through data. A simple Euler-Maruyama discretization is implemented for the generation of the time series.\n\n\n\nArguments\n\nX0::Real:         initial point X_0 of limit process X.\nA::Real:          positive drift parameter A.\nB::Real:          positive drift parameter B.\nσ::Real:          positive diffusion parameter σ.\nT::Real=100:      time horizon of time series.\ndt:Real=1e-3:     time discretization step used in the Euler-Maruyama scheme.\n\n\n\nSee also Fast_chaotic_ϵ.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.produce_trajectory_1D","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.produce_trajectory_1D","text":"produce_trajectory_1D(trajectory, T)\n\nGenerate a plot of a 2-dimensional (slow + fast dimension) multiscale time series of length T using the CairoMakie.jl package.\n\n\n\nArguments\n\ntrajectory:   2-dimensional time series of length T\nT::Real:      time horizon of time series.\n\n\n\nExamples\n\n# quadratic potential V with sine oscillation p\nT = 10.0\ntrajectory = Langevin_ϵ(1.0, func_config=LDO(), α=2.0, σ=1.0, ϵ=0.1, T=T)\nfig = produce_trajectory_1D(trajectory, T)\n\n\n\nSee also produce_trajectory_2D.\n\n\n\n\n\n","category":"function"},{"location":"multiscale_limit_pairs/#MDE_project.produce_trajectory_2D","page":"Multiscale System and Homogenized Limit Pairs","title":"MDE_project.produce_trajectory_2D","text":"produce_trajectory_2D(trajectory)\n\nGenerate a plot of a 4-dimensional (slow + fast dimension) multiscale time series using the CairoMakie.jl package.\n\n\n\nArguments\n\ntrajectory:   4-dimensional time series\n\n\n\nExamples\n\n# quadratic potential V and fast separable oscillating part in 2D\ntrajectory = Langevin_ϵ_2D([-5.0, -5.0], func_config=(x-> cos(x), x -> 1/2*cos(x)), M=[4 2;2 3], σ=5.0, ϵ=0.05, T=10.0)\nfig = produce_trajectory_2D(trajectory)\n\n\n\nSee also produce_trajectory_1D.\n\n\n\n\n\n","category":"function"},{"location":"MDE_asymptotic_variances/","page":"Asymptotic Variances of the MDE","title":"Asymptotic Variances of the MDE","text":"Σ_∞_QdP\nΣ_∞_QrP","category":"page"},{"location":"MDE_asymptotic_variances/#MDE_project.Σ_∞_QdP","page":"Asymptotic Variances of the MDE","title":"MDE_project.Σ_∞_QdP","text":"Σ_∞_QdP(ϑ, Σ)\n\nReturn the asymptotic variance of the MDE in the multiscale overdamped Langevin drift parameter estimation problem with a quadratic potential, drift parameter ϑ, and diffusion parameter Σ.\n\nThe asymptotic variance is given by\n\nbeginaligned\n  fractau^2(vartheta Sigma)J(vartheta Sigma)^2 = frac2SigmaJ(vartheta Sigma)^2 int_R Phi(x)^2 mu(x vartheta Sigma V)  dx\nendaligned\n\nwhere\n\nbeginaligned\n  J(vartheta Sigma) =  partial_vartheta mathscrC_vartheta _L^2(varphi) quad Phi(x) = frac1Sigma mu(x vartheta Sigma V) int_-infty^x h(z) mu(x vartheta Sigma V)  dz quad x in R\nendaligned\n\nHere mu(x vartheta Sigma V) corresponds to μ with V(x) = x^22. In the case of such a quadratic potential V it holds\n\nbeginaligned\n  J(vartheta Sigma) = frac34 beta left( fracSigmavartheta^2 right)^2 sigma_2^5 quad h(z) = fracSigma2 vartheta^2 beta left sigma_1^3 (1 - sigma_1^2 z^2) exp left( -fracsigma_1^2 z^22 right) - sigma_2^3 right quad z in R\nendaligned\n\nwith\n\nbeginaligned\n      sigma_1^2 = fracbeta^2 varthetavartheta + Sigmabeta^2  quad sigma_2^2 = fracbeta^2 varthetavartheta + 2 Sigmabeta^2 \nendaligned\n\nwarning: Warning\nThe running times for a single evalutation can take some time due to the involved integrations, but it usually needs to be computed only once.\n\n\n\nArguments\n\nϑ::Real:                    positive drift coefficient vartheta.\nΣ::Real:                    positive diffusion coefficient Sigma.\n\n\n\nExamples\n\njulia> Σ_∞_QdP(1.2, 0.6)\n\n\n\nSee also μ, Σ_∞_QrP.\n\n\n\n\n\n","category":"function"},{"location":"MDE_asymptotic_variances/#MDE_project.Σ_∞_QrP","page":"Asymptotic Variances of the MDE","title":"MDE_project.Σ_∞_QrP","text":"Σ_∞_QrP(ϑ, Σ)\n\nReturn the asymptotic variance of the MDE in the multiscale overdamped Langevin drift parameter estimation problem with a quartic potential, drift parameter ϑ, and diffusion parameter Σ.\n\nThe asymptotic variance is given by\n\nbeginaligned\n  fractau^2(vartheta Sigma)J(vartheta Sigma)^2 = frac2SigmaJ(vartheta Sigma)^2 int_R Phi(x)^2 mu(x vartheta Sigma V)  dx\nendaligned\n\nwhere\n\nbeginaligned\n  J(vartheta Sigma) =  partial_vartheta mathscrC_vartheta _L^2(varphi) quad Phi(x) = frac1Sigma mu(x vartheta Sigma V) int_-infty^x h(z) mu(x vartheta Sigma V)  dz quad x in R\nendaligned\n\nHere mu(x vartheta Sigma V) corresponds to μ with V(x) = x^44-x^22. In this case it holds\n\nbeginaligned\n  J(vartheta Sigma) = int_R (partial_vartheta mu(vartheta Sigma V) ast k_beta)(x)  partial_vartheta mu(x vartheta Sigma V)  dx 05cm\n  h(z) = (partial_vartheta mu(vartheta Sigma V) ast k_beta)(z) - int_R (partial_vartheta mu(vartheta Sigma V) ast k_beta)(x)  mu(x vartheta Sigma V)  dx\nendaligned\n\nwarning: Warning\nThe running times for a single evalutation can take some time due to the involved integrations, but it usually needs to be computed only once.\n\n\n\nArguments\n\nϑ::Real:                    positive drift coefficient vartheta.\nΣ::Real:                    positive diffusion coefficient Sigma.\n\n\n\nExamples\n\njulia> Σ_∞_QrP(1.2, 0.6)\n\n\n\nSee also μ, k, Σ_∞_QdP.\n\n\n\n\n\n","category":"function"},{"location":"MDE_gradients/","page":"Cost Functional Gradients for the MDE","title":"Cost Functional Gradients for the MDE","text":"Δ_grad_ϑ\nΔ_grad_Σ\nΔ_Gaussian1D_grad","category":"page"},{"location":"MDE_gradients/#MDE_project.Δ_grad_ϑ","page":"Cost Functional Gradients for the MDE","title":"MDE_project.Δ_grad_ϑ","text":"Δ_grad_ϑ(data, ϑ, Σ, V)\n\nCompute gradient of cost functional Δ with respect to ϑ for given data and parameter values ϑ and Σ and a potential V.\n\nA properly discretized version of the gradient of the cost functional, given by\n\nbeginaligned\n  partial_vartheta Delta_T(X_epsilon vartheta Sigma V) = -frac2T int_0^T (partial_vartheta mu(vartheta Sigma V) ast k_beta)(X_epsilon(t))  dt + 2 int_R (mu(vartheta Sigma V) ast k_beta)(x) partial_vartheta mu(vartheta Sigma x)  dx\nendaligned\n\nis implemented and evaluated via multithreading. Here, X_ϵ is a one-dimensional time series of length T, obtained from a multiscale SDE, mu is the invariant density of the homogenized limit SDE corresponding to μ, k_beta refers to k, and ast is the convolution operator on R.\n\nwarning: Warning\nThe computational cost of this function is quite high due to the integration of the convolutions, so if the data is finely discretized, then the running times for a single evalutation are relatively long. Remember that, in this case of a  non-quadratic potential, further simplifications of the above formula are not known thus far.\n\n\n\nArguments\n\ndata::Vector{Real}:         one-dimensional time series X_ϵ.\nϑ::Real:                    positive drift coefficient vartheta.\nΣ::Real:                    positive diffusion coefficient Sigma.\nV=x -> x^4/4-x^2/2:         defining potential function V for the invariant density.\n\n\n\nExamples\n\n$ julia --threads 10 --project=. # start julia with 10 threads and activate project\n\njulia> Threads.nthreads()\njulia> using MDE_project\njulia> data = Langevin_ϵ(1.0, func_config=NLDO(), α=2.0, σ=1.0, ϵ=0.1, T=100)[1]\njulia> Δ_grad_ϑ(data, 1, 1)\n\n\n\nSee also Δ.\n\n\n\n\n\n","category":"function"},{"location":"MDE_gradients/#MDE_project.Δ_grad_Σ","page":"Cost Functional Gradients for the MDE","title":"MDE_project.Δ_grad_Σ","text":"Δ_grad_Σ(data, ϑ, Σ, V)\n\nCompute gradient of cost functional Δ with respect to Σ for given data and parameter values ϑ and Σ and a potential V.\n\nA properly discretized version of the gradient of the cost functional, given by\n\nbeginaligned\n  partial_Sigma Delta_T(X_epsilon vartheta Sigma V) = -frac2T int_0^T (partial_Sigma mu(vartheta Sigma V) ast k_beta)(X_epsilon(t))  dt + 2 int_R (mu(vartheta Sigma V) ast k_beta)(x) partial_Sigma mu(vartheta Sigma x)  dx\nendaligned\n\nis implemented and evaluated via multithreading. Here, X_ϵ is a one-dimensional time series of length T, obtained from a multiscale SDE, mu is the invariant density of the homogenized limit SDE corresponding to μ, k_beta refers to k, and ast is the convolution operator on R.\n\nwarning: Formula for a specific potential!\nThe above formula of the cost functional employs the following rather specific invariant density beginaligned\n  mu(x vartheta Sigma) = frac1Z(ϑ Σ) expleft( -fracvarthetaSigma V(x) right) quad V(x) = x^22 + x^44 quad x in R\nendalignedThis will be changed soon to allow for other potentials V.\n\nwarning: Warning\nThe computational cost of this function is quite high due to the integration of the convolutions, so if the data is finely discretized, then the running times for a single evalutation are relatively long. Remember that, in this case of a  non-quadratic potential, further simplifications of the above formula are not known thus far.\n\n\n\nArguments\n\ndata::Vector{Real}:         one-dimensional time series X_ϵ.\nϑ::Real:                    positive drift coefficient vartheta.\nΣ::Real:                    positive diffusion coefficient Sigma.\nV=x -> x^4/4-x^2/2:         defining potential function V for the invariant density.\n\n\n\nExamples\n\n$ julia --threads 10 --project=. # start julia with 10 threads and activate project\n\njulia> Threads.nthreads()\njulia> using MDE_project\njulia> data = Langevin_ϵ(1.0, func_config=NLDO(), α=2.0, σ=1.0, ϵ=0.1, T=100)[1]\njulia> Δ_grad_Σ(data, 1, 1)\n\n\n\nSee also Δ.\n\n\n\n\n\n","category":"function"},{"location":"MDE_gradients/#MDE_project.Δ_Gaussian1D_grad","page":"Cost Functional Gradients for the MDE","title":"MDE_project.Δ_Gaussian1D_grad","text":"Δ_Gaussian1D_grad(data, ϑ, Σ)\n\nCompute gradient of cost functional Δ_Gaussian1D for given one-dimensonal data and parameter values ϑ and Σ.\n\nA properly discretized version of the gradient of the cost functional, given by\n\nbeginaligned\n    partial_vartheta Delta_T(X_epsilon vartheta Sigma V) \n    = fracbeta^2 SigmaT left( 1 + beta^2 fracSigmavartheta right)^52 vartheta^3 int_0^T left left( X_epsilon(t)^2 beta^2 - 1 right)vartheta - beta^2 Sigma right expleft( -fracbeta^2 X_epsilon(t)^22 (1 + beta^2 fracSigmavartheta) right)  dt 025cm\n    + fracbeta^2 Sigmaleft( 1 + 2 beta^2 fracSigmavartheta right)^32 vartheta^2\nendaligned\n\nis implemented. Here, X_ϵ is a one-dimensional time series of length T, obtained from a multiscale SDE, and beta comes from k.\n\n\n\nArguments\n\ndata::Vector{Real}:         one-dimensional time series X_ϵ.\nϑ::Real:                    positive drift coefficient vartheta.\nΣ::Real:                    positive diffusion coefficient Sigma.\n\n\n\nExamples\n\njulia> using MDE_project\njulia> data = Langevin_ϵ(1.0, func_config=LDO(), α=2.0, σ=1.0, ϵ=0.1, T=100)[1]\njulia> Δ_Gaussian1D_grad(data, 1, 1)\n\n\n\nSee also Δ_Gaussian1D.\n\n\n\n\n\n","category":"function"},{"location":"MDE_functionals/","page":"Cost Functionals for the MDE","title":"Cost Functionals for the MDE","text":"k\nΔ\nΔ_Gaussian1D\nΔ_Gaussian2D","category":"page"},{"location":"MDE_functionals/#MDE_project.k","page":"Cost Functionals for the MDE","title":"MDE_project.k","text":"k(x, β)\n\nReturn β and function value of the characteristic function of a centered Gaussian density with standard deviation β at the point x as a tuple.\n\nThis characteristic function is given by\n\nbeginaligned\n  k_beta(x) = expleft( -fracbeta^2 x^22 right) quad x in R\nendaligned\n\nIt is used in the definition of the MDE and thoroughly outlined in the main manuscript in the numerics section.\n\n\n\nArguments\n\nx::Real:         argument x at which to evaluate the function.\nβ::Real:         positive number beta.\n\n\n\n\n\n","category":"function"},{"location":"MDE_functionals/#MDE_project.Δ","page":"Cost Functionals for the MDE","title":"MDE_project.Δ","text":"Δ(data, ϑ, Σ, V)\n\nCompute cost functional for given data and parameter values ϑ and Σ.\n\nA properly discretized version of the cost functional, given by\n\nbeginaligned\n  Delta_T(X_epsilon vartheta Sigma V) = - frac2T int_0^T (mu(vartheta Sigma V) ast k_beta)(X_epsilon(t))  dt + int_R (mu(vartheta Sigma V) ast k_beta)(x) mu(vartheta Sigma x)  dx\nendaligned\n\nis implemented and evaluated via multithreading. Here, X_ϵ is a one-dimensional time series of length T, obtained from a multiscale SDE, mu is the invariant density of the homogenized limit SDE, k_beta refers to k, and ast is the convolution operator on R. See the main manuscript for details on this functional. It is the core object of the MDE.\n\nwarning: Warning\nThe computational cost of this function is quite high due to the integration of the convolutions, so if the data is finely discretized, then the running times for a single evalutation are relatively long. Remember that, in this case of a  non-quadratic potential, further simplifications of the above formula are not known thus far.\n\nnote: Note\nWhen comparing the above formula with the formula from the main manuscript, then one notices that the double integral term is missing above.  This is on purpose because the double integral does not depend on any parameters with respect to which we will optimize.\n\n\n\nArguments\n\ndata::Vector{Real}:         one-dimensional time series X_ϵ.\nϑ::Real:                    positive drift coefficient vartheta.\nΣ::Real:                    positive diffusion coefficient Sigma.\nV=x -> x^4/4-x^2/2:         defining potential function V for the invariant density.\n\n\n\nExamples\n\n$ julia --threads 10 --project=. # start julia with 10 threads and activate project\n\njulia> Threads.nthreads()\njulia> using MDE_project\njulia> data = Langevin_ϵ(1.0, func_config=NLDO(), α=2.0, σ=1.0, ϵ=0.1, T=100)[1]\njulia> Δ(data, 1, 1)\n\n\n\nSee also Δ_Gaussian1D, Δ_Gaussian2D.\n\n\n\n\n\n","category":"function"},{"location":"MDE_functionals/#MDE_project.Δ_Gaussian1D","page":"Cost Functionals for the MDE","title":"MDE_project.Δ_Gaussian1D","text":"Δ_Gaussian1D(data, ϑ, Σ)\n\nCompute cost functional for given one-dimensonal data and parameter values ϑ and Σ in the case where the invariant density of the homogenized limit SDE is centered Gaussian.\n\nA properly discretized version of the cost functional, given by\n\nbeginaligned\n  Delta_T(X_epsilon vartheta Sigma) = -frac2T sqrt1 + beta^2 fracSigmavartheta  int_0^T expleft( -fracbeta^2 X_epsilon(t)^22 (1 + beta^2 fracSigmavartheta) right)  dt + frac1sqrt1 + 2 beta^2 fracSigmavartheta\nendaligned\n\nis implemented. Here, X_ϵ is a one-dimensional time series of length T, obtained from a multiscale SDE, and beta comes from k. See the main manuscript for details on this functional. It is the core object of the MDE.\n\nnote: Note\nThe evaluation is, compared to Δ, extremely fast, even for finely discretized data, which signifies the utility of choosing a centered Gaussian weight k in this Gaussian case.\n\n\n\nArguments\n\ndata::Vector{Real}:         one-dimensional time series X_ϵ.\nϑ::Real:                    positive drift coefficient vartheta.\nΣ::Real:                    positive diffusion coefficient Sigma.\n\n\n\nExamples\n\njulia> using MDE_project\njulia> data = Langevin_ϵ(1.0, func_config=LDO(), α=2.0, σ=1.0, ϵ=0.1, T=100)[1]\njulia> Δ_Gaussian1D(data, 1, 1)\n\n\n\nSee also Δ, Δ_Gaussian2D.\n\n\n\n\n\n","category":"function"},{"location":"MDE_functionals/#MDE_project.Δ_Gaussian2D","page":"Cost Functionals for the MDE","title":"MDE_project.Δ_Gaussian2D","text":"Δ_Gaussian2D(data, ϑ, Σ)\n\nCompute cost functional for given two-dimensonal data and parameter values ϑ and Σ in the case where the invariant density of the homogenized limit SDE is centered Gaussian.\n\nA properly discretized version of the cost functional, given by\n\nbeginaligned\n  Delta_T(X_epsilon vartheta Sigma) = - frac2T sqrtdet(I_d + beta^2 M(vartheta Sigma))  int_0^T expleft( -fracbeta^22 X_epsilon(t)^top left( I_d + beta^2 M(vartheta Sigma) right)^-1 X_epsilon(t) right)  dt 025cm\n    + frac1sqrtdet(I_d + 2 beta^2 M(vartheta Sigma))\nendaligned\n\nis implemented. Here, X_ϵ is a two-dimensional time series of length T, obtained from a multiscale SDE, M(vartheta Sigma) in R^2 times 2 is a matrix depending on vartheta and Sigma and is given by the covariance matrix of the invariant Gaussian density, and beta comes from k. See the main manuscript for details on this functional and the appearing quantities. It is the core object of the MDE.\n\nnote: Note\nThe evaluation is, compared to Δ, extremely fast, even for finely discretized two-dimensional data, which signifies the utility of choosing a two-dimensional centered Gaussian weight k in this Gaussian case.\n\n\n\nArguments\n\ndata::Vector{Real}:         two-dimensional time series X_ϵ.\nϑ::Array{Real}:             positive definite drift matrix vartheta in mathbbR^2 times 2.\nΣ::Array{Real}:             positive definite diffusion matrix Sigma in mathbbR^2 times 2.\n\n\n\nExamples\n\njulia> using MDE_project\njulia> M=[4 2;2 3]\njulia> σ = 5.0  \njulia> data = Langevin_ϵ_2D([-5.0, -5.0], func_config=(x-> cos(x), x -> 1/2*cos(x)), M=M, σ=σ, ϵ=0.1, T=100.0)[1]\njulia> CorrK = [K(x-> cos(x), σ) 0 ; 0 K(x -> 1/2*cos(x), σ)]\njulia> ϑ = CorrK*M\njulia> Σ = σ*CorrK\njulia> Δ_Gaussian2D(data, ϑ, Σ)\n\n\n\nSee also Δ, Δ_Gaussian1D.\n\n\n\n\n\n","category":"function"}]
}
